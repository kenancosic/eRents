// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eRents.Domain.Models;

#nullable disable

namespace eRents.Domain.Migrations
{
    [DbContext(typeof(ERentsContext))]
    [Migration("20250516122018_AddedIsPublicToUser")]
    partial class AddedIsPublicToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropertyAmenity", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int")
                        .HasColumnName("amenity_id");

                    b.HasKey("PropertyId", "AmenityId")
                        .HasName("PK__Property__BDCB20312E16270C");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities", (string)null);
                });

            modelBuilder.Entity("eRents.Domain.Models.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("amenity_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityId"));

                    b.Property<string>("AmenityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("amenity_name");

                    b.HasKey("AmenityId")
                        .HasName("PK__Amenitie__E908452DD87B33D9");

                    b.HasIndex(new[] { "AmenityName" }, "UQ__Amenitie__E1B33D18C14BC270")
                        .IsUnique();

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("eRents.Domain.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly?>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("booking_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__5DE3A5B1D7B9142C");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("eRents.Domain.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<DateTime?>("DateUploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_name");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MaintenanceIssueId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("ImageId")
                        .HasName("PK__Images__7516F70C62BBC63F");

                    b.HasIndex("MaintenanceIssueId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("eRents.Domain.Models.IssuePriority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PriorityId");

                    b.ToTable("IssuePriorities");
                });

            modelBuilder.Entity("eRents.Domain.Models.IssueStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("IssueStatuses");
                });

            modelBuilder.Entity("eRents.Domain.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__E7FEA47700C11F68");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("eRents.Domain.Models.MaintenanceIssue", b =>
                {
                    b.Property<int>("MaintenanceIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceIssueId"));

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTenantComplaint")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresInspection")
                        .HasColumnType("bit");

                    b.Property<string>("ResolutionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MaintenanceIssueId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("MaintenanceIssues");
                });

            modelBuilder.Entity("eRents.Domain.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime?>("DateSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_sent")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__0BBF6EE695058BE7");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("eRents.Domain.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateOnly?>("DatePaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_paid")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("payment_reference");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__ED1FC9EA3D8D2E81");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenantId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eRents.Domain.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<decimal?>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_added")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Facilities")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("facilities");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("PropertyStatusStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RentingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("PropertyId")
                        .HasName("PK__Properti__735BA4633A94E7C3");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyStatusStatusId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("RentingTypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("eRents.Domain.Models.PropertyStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("PropertyStatuses");
                });

            modelBuilder.Entity("eRents.Domain.Models.PropertyType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("eRents.Domain.Models.RentingType", b =>
                {
                    b.Property<int>("RentingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentingTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RentingTypeId");

                    b.ToTable("RentingTypes");
                });

            modelBuilder.Entity("eRents.Domain.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_reported")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<decimal?>("StarRating")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK__Complain__A771F61C85B78CAA");

                    b.HasIndex("BookingId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenantId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("eRents.Domain.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantId"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_info");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateOnly?>("LeaseStartDate")
                        .HasColumnType("date")
                        .HasColumnName("lease_start_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<string>("TenantStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tenant_status");

                    b.HasKey("TenantId")
                        .HasName("PK__Tenants__D6F29F3EFB09F8FF");

                    b.HasIndex("PropertyId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("eRents.Domain.Models.TenantPreference", b =>
                {
                    b.Property<int>("TenantPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantPreferenceId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("SearchEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SearchStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TenantPreferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantPreferences");
                });

            modelBuilder.Entity("eRents.Domain.Models.TenantPreferenceAmenity", b =>
                {
                    b.Property<int>("TenantPreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("TenantPreferenceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("TenantPreferenceAmenities");
                });

            modelBuilder.Entity("eRents.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("reset_token");

                    b.Property<DateTime?>("ResetTokenExpiration")
                        .HasColumnType("datetime")
                        .HasColumnName("reset_token_expiration");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_type");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370FCB53D7B9");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E61648C818EE9")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC5724649C4DE")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eRents.Domain.Models.UserSavedProperty", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSaved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "PropertyId")
                        .HasName("PK__UserSave__5084563F82C7AD6A");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserSavedProperties");
                });

            modelBuilder.Entity("eRents.Domain.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("PropertyAmenity", b =>
                {
                    b.HasOne("eRents.Domain.Models.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .IsRequired()
                        .HasConstraintName("FK__PropertyA__ameni__5165187F");

                    b.HasOne("eRents.Domain.Models.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("FK__PropertyA__prope__5070F446");
                });

            modelBuilder.Entity("eRents.Domain.Models.Booking", b =>
                {
                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Bookings__proper__5812160E");

                    b.HasOne("eRents.Domain.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Bookings__user_i__59063A47");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Domain.Models.Image", b =>
                {
                    b.HasOne("eRents.Domain.Models.MaintenanceIssue", "MaintenanceIssue")
                        .WithMany("Images")
                        .HasForeignKey("MaintenanceIssueId")
                        .HasConstraintName("FK__Images__Maintenance__MaintenanceIssueId");

                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Images__Property__02FC7413");

                    b.HasOne("eRents.Domain.Models.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK__Images__ReviewId__02084FDA");

                    b.Navigation("MaintenanceIssue");

                    b.Navigation("Property");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("eRents.Domain.Models.MaintenanceIssue", b =>
                {
                    b.HasOne("eRents.Domain.Models.User", "AssignedToUser")
                        .WithMany("AssignedMaintenanceIssues")
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("eRents.Domain.Models.IssuePriority", "Priority")
                        .WithMany("MaintenanceIssues")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("MaintenanceIssues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRents.Domain.Models.User", "ReportedByUser")
                        .WithMany("ReportedMaintenanceIssues")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRents.Domain.Models.IssueStatus", "Status")
                        .WithMany("MaintenanceIssues")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Priority");

                    b.Navigation("Property");

                    b.Navigation("ReportedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("eRents.Domain.Models.Message", b =>
                {
                    b.HasOne("eRents.Domain.Models.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__receiv__6EF57B66");

                    b.HasOne("eRents.Domain.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__sender__6E01572D");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("eRents.Domain.Models.Payment", b =>
                {
                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("Payments")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Payments__proper__656C112C");

                    b.HasOne("eRents.Domain.Models.Tenant", "Tenant")
                        .WithMany("Payments")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK__Payments__tenant__6477ECF3");

                    b.Navigation("Property");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("eRents.Domain.Models.Property", b =>
                {
                    b.HasOne("eRents.Domain.Models.Location", "Location")
                        .WithMany("Properties")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Propertie__Locat__625A9A57");

                    b.HasOne("eRents.Domain.Models.User", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Propertie__owner__4AB81AF0");

                    b.HasOne("eRents.Domain.Models.PropertyStatus", null)
                        .WithMany("Properties")
                        .HasForeignKey("PropertyStatusStatusId");

                    b.HasOne("eRents.Domain.Models.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId");

                    b.HasOne("eRents.Domain.Models.RentingType", "RentingType")
                        .WithMany("Properties")
                        .HasForeignKey("RentingTypeId");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");

                    b.Navigation("RentingType");
                });

            modelBuilder.Entity("eRents.Domain.Models.Review", b =>
                {
                    b.HasOne("eRents.Domain.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Complaint__prope__5EBF139D");

                    b.HasOne("eRents.Domain.Models.Tenant", null)
                        .WithMany("Reviews")
                        .HasForeignKey("TenantId");

                    b.Navigation("Booking");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("eRents.Domain.Models.Tenant", b =>
                {
                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("Tenants")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Tenants__propert__5441852A");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("eRents.Domain.Models.TenantPreference", b =>
                {
                    b.HasOne("eRents.Domain.Models.User", "User")
                        .WithMany("TenantPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Domain.Models.TenantPreferenceAmenity", b =>
                {
                    b.HasOne("eRents.Domain.Models.Amenity", "Amenity")
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRents.Domain.Models.TenantPreference", "TenantPreference")
                        .WithMany()
                        .HasForeignKey("TenantPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("TenantPreference");
                });

            modelBuilder.Entity("eRents.Domain.Models.User", b =>
                {
                    b.HasOne("eRents.Domain.Models.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_User_LocationID");

                    b.HasOne("eRents.Domain.Models.UserType", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId");

                    b.Navigation("Location");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("eRents.Domain.Models.UserSavedProperty", b =>
                {
                    b.HasOne("eRents.Domain.Models.Property", "Property")
                        .WithMany("UserSavedProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserSaved__Prope__51300E55");

                    b.HasOne("eRents.Domain.Models.User", "User")
                        .WithMany("UserSavedProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserSaved__UserI__503BEA1C");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Domain.Models.IssuePriority", b =>
                {
                    b.Navigation("MaintenanceIssues");
                });

            modelBuilder.Entity("eRents.Domain.Models.IssueStatus", b =>
                {
                    b.Navigation("MaintenanceIssues");
                });

            modelBuilder.Entity("eRents.Domain.Models.Location", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("eRents.Domain.Models.MaintenanceIssue", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("eRents.Domain.Models.Property", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("MaintenanceIssues");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("Tenants");

                    b.Navigation("UserSavedProperties");
                });

            modelBuilder.Entity("eRents.Domain.Models.PropertyStatus", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("eRents.Domain.Models.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("eRents.Domain.Models.RentingType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("eRents.Domain.Models.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("eRents.Domain.Models.Tenant", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("eRents.Domain.Models.User", b =>
                {
                    b.Navigation("AssignedMaintenanceIssues");

                    b.Navigation("Bookings");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("Properties");

                    b.Navigation("ReportedMaintenanceIssues");

                    b.Navigation("TenantPreferences");

                    b.Navigation("UserSavedProperties");
                });

            modelBuilder.Entity("eRents.Domain.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}

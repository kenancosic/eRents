// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eRents.Services.Database;

#nullable disable

namespace eRents.Services.Migrations
{
    [DbContext(typeof(ERentsContext))]
    partial class ERentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Favorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.HasKey("UserId", "PropertyId")
                        .HasName("PK__Favorite__9E8B8D4998D5B8C6");

                    b.HasIndex("PropertyId");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("PropertyAmenity", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int")
                        .HasColumnName("amenity_id");

                    b.HasKey("PropertyId", "AmenityId")
                        .HasName("PK__Property__BDCB20311129E8E8");

                    b.HasIndex("AmenityId");

                    b.ToTable("Property_Amenities", (string)null);
                });

            modelBuilder.Entity("eRents.Services.Database.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .HasColumnType("int")
                        .HasColumnName("amenity_id");

                    b.Property<string>("AmenityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("amenity_name");

                    b.HasKey("AmenityId")
                        .HasName("PK__Amenitie__E908452D40650F6A");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("eRents.Services.Database.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("date")
                        .HasColumnName("booking_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__5DE3A5B1F0CCDD3A");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("eRents.Services.Database.Canton", b =>
                {
                    b.Property<int>("CantonId")
                        .HasColumnType("int")
                        .HasColumnName("canton_id");

                    b.Property<string>("CantonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("canton_name");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.HasKey("CantonId")
                        .HasName("PK__Cantons__7FFFB2CB9EC7B527");

                    b.HasIndex("RegionId");

                    b.ToTable("Cantons");
                });

            modelBuilder.Entity("eRents.Services.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<int?>("CantonId")
                        .HasColumnType("int")
                        .HasColumnName("canton_id");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city_name");

                    b.HasKey("CityId")
                        .HasName("PK__Cities__031491A86FAC9818");

                    b.HasIndex("CantonId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("eRents.Services.Database.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("contract_id");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<string>("ContractText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("contract_text");

                    b.Property<DateTime?>("SigningDate")
                        .HasColumnType("date")
                        .HasColumnName("signing_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ContractId")
                        .HasName("PK__Contract__F8D66423F61F466F");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("eRents.Services.Database.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("User1Id")
                        .HasColumnType("int")
                        .HasColumnName("user1_id");

                    b.Property<int?>("User2Id")
                        .HasColumnType("int")
                        .HasColumnName("user2_id");

                    b.HasKey("ConversationId")
                        .HasName("PK__Conversa__311E7E9A579CBF7C");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("eRents.Services.Database.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ImageId")
                        .HasName("PK__Images__DC9AC955675E0E5B");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("eRents.Services.Database.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("message_text");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime")
                        .HasColumnName("send_date");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__0BBF6EE6773BBECC");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("eRents.Services.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("notification_date");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notification_text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842F3BDE2922");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("eRents.Services.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__ED1FC9EAC730626A");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eRents.Services.Database.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("property_type");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("PropertyId")
                        .HasName("PK__Properti__735BA46376FC2C6A");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("eRents.Services.Database.PropertyFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("feature_id");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("feature_name");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.HasKey("FeatureId")
                        .HasName("PK__Property__7906CBD7DC4966F9");

                    b.HasIndex("PropertyId");

                    b.ToTable("Property_Features", (string)null);
                });

            modelBuilder.Entity("eRents.Services.Database.PropertyRating", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 1)")
                        .HasColumnName("rating");

                    b.HasKey("UserId", "PropertyId")
                        .HasName("PK__Property__9E8B8D49F9CDBFAE");

                    b.HasIndex("PropertyId");

                    b.ToTable("Property_Ratings", (string)null);
                });

            modelBuilder.Entity("eRents.Services.Database.PropertyView", b =>
                {
                    b.Property<int>("ViewId")
                        .HasColumnType("int")
                        .HasColumnName("view_id");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ViewDate")
                        .HasColumnType("date")
                        .HasColumnName("view_date");

                    b.HasKey("ViewId")
                        .HasName("PK__Property__B5A34EE20CAAEEAB");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Property_Views", (string)null);
                });

            modelBuilder.Entity("eRents.Services.Database.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("region_name");

                    b.HasKey("RegionId")
                        .HasName("PK__Regions__01146BAE487C7A1E");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("eRents.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 1)")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("review_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__60883D909569A869");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("eRents.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("eRents.Services.Database.User", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F4566DF4A");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eRents.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Favorite", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__prope__4BAC3F29");

                    b.HasOne("eRents.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__user___4AB81AF0");
                });

            modelBuilder.Entity("PropertyAmenity", b =>
                {
                    b.HasOne("eRents.Services.Database.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .IsRequired()
                        .HasConstraintName("FK__Property___ameni__3D5E1FD2");

                    b.HasOne("eRents.Services.Database.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("FK__Property___prope__3C69FB99");
                });

            modelBuilder.Entity("eRents.Services.Database.Booking", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Bookings__proper__403A8C7D");

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Bookings__user_i__412EB0B6");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.Canton", b =>
                {
                    b.HasOne("eRents.Services.Database.Region", "Region")
                        .WithMany("Cantons")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK__Cantons__region___30F848ED");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("eRents.Services.Database.City", b =>
                {
                    b.HasOne("eRents.Services.Database.Canton", "Canton")
                        .WithMany("Cities")
                        .HasForeignKey("CantonId")
                        .HasConstraintName("FK__Cities__canton_i__33D4B598");

                    b.Navigation("Canton");
                });

            modelBuilder.Entity("eRents.Services.Database.Contract", b =>
                {
                    b.HasOne("eRents.Services.Database.Booking", "Booking")
                        .WithMany("Contracts")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Contracts__booki__5DCAEF64");

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Contracts__user___5EBF139D");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.Conversation", b =>
                {
                    b.HasOne("eRents.Services.Database.User", "User1")
                        .WithMany("ConversationUser1s")
                        .HasForeignKey("User1Id")
                        .HasConstraintName("FK__Conversat__user1__5629CD9C");

                    b.HasOne("eRents.Services.Database.User", "User2")
                        .WithMany("ConversationUser2s")
                        .HasForeignKey("User2Id")
                        .HasConstraintName("FK__Conversat__user2__571DF1D5");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("eRents.Services.Database.Image", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", null)
                        .WithMany("Images")
                        .HasForeignKey("PropertyId");

                    b.HasOne("eRents.Services.Database.Review", null)
                        .WithMany("Images")
                        .HasForeignKey("ReviewId");

                    b.HasOne("eRents.Services.Database.User", null)
                        .WithMany("Images")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eRents.Services.Database.Message", b =>
                {
                    b.HasOne("eRents.Services.Database.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("FK__Messages__conver__59FA5E80");

                    b.HasOne("eRents.Services.Database.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK__Messages__sender__5AEE82B9");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("eRents.Services.Database.Notification", b =>
                {
                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__user___6EF57B66");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.Payment", b =>
                {
                    b.HasOne("eRents.Services.Database.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Payments__bookin__4E88ABD4");

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Payments__user_i__4F7CD00D");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.Property", b =>
                {
                    b.HasOne("eRents.Services.Database.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Propertie__city___37A5467C");

                    b.HasOne("eRents.Services.Database.User", "Owner")
                        .WithMany("PropertiesNavigation")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__Propertie__owner__36B12243");

                    b.Navigation("City");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("eRents.Services.Database.PropertyFeature", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Property___prope__75A278F5");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("eRents.Services.Database.PropertyRating", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", "Property")
                        .WithMany("PropertyRatings")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("FK__Property___prope__534D60F1");

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("PropertyRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Property___user___52593CB8");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.PropertyView", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", "Property")
                        .WithMany("PropertyViews")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Property___prope__71D1E811");

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("PropertyViews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Property___user___72C60C4A");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.Review", b =>
                {
                    b.HasOne("eRents.Services.Database.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__Reviews__propert__440B1D61");

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reviews__user_id__44FF419A");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.UserRole", b =>
                {
                    b.HasOne("eRents.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eRents.Services.Database.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRents.Services.Database.Booking", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("eRents.Services.Database.Canton", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("eRents.Services.Database.City", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("eRents.Services.Database.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("eRents.Services.Database.Property", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("PropertyFeatures");

                    b.Navigation("PropertyRatings");

                    b.Navigation("PropertyViews");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("eRents.Services.Database.Region", b =>
                {
                    b.Navigation("Cantons");
                });

            modelBuilder.Entity("eRents.Services.Database.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("eRents.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eRents.Services.Database.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Contracts");

                    b.Navigation("ConversationUser1s");

                    b.Navigation("ConversationUser2s");

                    b.Navigation("Images");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("PropertiesNavigation");

                    b.Navigation("PropertyRatings");

                    b.Navigation("PropertyViews");

                    b.Navigation("Reviews");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

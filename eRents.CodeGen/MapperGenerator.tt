<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Input parameter 'entityName' is now passed by the T4 host (Program.cs)
    string mapperNamespace = $"eRents.Features.{entityName}Management.Mappers";
    string dtoNamespace = $"eRents.Features.{entityName}Management.DTOs";
    string sharedDtoNamespace = "eRents.Features.Shared.DTOs";
    string domainModelsNamespace = "eRents.Domain.Models";

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using <#= domainModelsNamespace #>;
using <#= dtoNamespace #>;
using <#= sharedDtoNamespace #>;

namespace <#= mapperNamespace #>;

/// <summary>
/// Mapper for converting between <#= entityName #> entity and DTOs
/// Follows clean architecture principles with no cross-entity bloat
/// </summary>
public static class <#= entityName #>Mapper
{
    /// <summary>
    /// Convert <#= entityName #> entity to response DTO
    /// </summary>
    public static <#= entityName #>Response To<#= entityName #>Response(this <#= entityName #> entity)
    {
        return new <#= entityName #>Response
        {
            Id = entity.Id,
            // TODO: Add entity-specific property mappings here
            // Examples:
            // Name = entity.Name,
            // Description = entity.Description,
            // CreatedAt = entity.CreatedAt,
            // UpdatedAt = entity.UpdatedAt,
            
            // Foreign key IDs only - no embedded objects
            // CreatedById = entity.CreatedById,
            // CategoryId = entity.CategoryId,
            
            // Related entity IDs only - no embedded objects
            // RelatedEntityIds = entity.RelatedEntities?.Select(r => r.Id).ToList() ?? new(),
        };
    }

    /// <summary>
    /// Convert request DTO to <#= entityName #> entity for creation
    /// </summary>
    public static <#= entityName #> ToEntity(this <#= entityName #>Request request)
    {
        return new <#= entityName #>
        {
            // TODO: Add entity-specific property mappings here
            // Examples:
            // Name = request.Name,
            // Description = request.Description,
            // CategoryId = request.CategoryId,
        };
    }

    /// <summary>
    /// Update existing <#= entityName #> entity with request DTO data
    /// </summary>
    public static void UpdateEntity(this <#= entityName #>Request request, <#= entityName #> entity)
    {
        // TODO: Add entity-specific property mappings here
        // Examples:
        // entity.Name = request.Name;
        // entity.Description = request.Description;
        // entity.CategoryId = request.CategoryId;
        // entity.UpdatedAt = DateTime.UtcNow;
    }

    // TODO: Add Address mapping if entity has Address property
    // Example:
    /*
    public static AddressResponse ToAddressResponse(this Address address)
    {
        return new AddressResponse
        {
            StreetLine1 = address.StreetLine1,
            StreetLine2 = address.StreetLine2,
            City = address.City,
            State = address.State,
            Country = address.Country,
            PostalCode = address.PostalCode,
            Latitude = address.Latitude,
            Longitude = address.Longitude,
            FullAddress = address.GetFullAddress()
        };
    }

    public static Address ToAddress(this AddressRequest request)
    {
        return Address.Create(
            request.StreetLine1,
            request.StreetLine2,
            request.City,
            request.State,
            request.Country,
            request.PostalCode,
            request.Latitude,
            request.Longitude
        );
    }
    */
} 
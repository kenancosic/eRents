<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="projectName" type="System.String" #>
<#@ parameter name="projectType" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".dockerfile" #>
<#
    // Docker Generation Template for eRents Project
    // Supports multiple project types: WebApi, RabbitMQMicroservice
    
    string baseImage = "mcr.microsoft.com/dotnet/aspnet:6.0";
    string sdkImage = "mcr.microsoft.com/dotnet/sdk:6.0";
    string workDir = "/app";
    string srcDir = "/src";
    
    // Project-specific configurations
    Dictionary<string, Dictionary<string, string>> projectConfigs = new Dictionary<string, Dictionary<string, string>>
    {
        ["WebApi"] = new Dictionary<string, string>
        {
            ["ports"] = "80,443",
            ["entryPoint"] = "eRents.WebApi.dll",
            ["projectPath"] = "eRents.WebApi/eRents.WebApi.csproj",
            ["copyPath"] = "eRents.WebApi"
        },
        ["RabbitMQMicroservice"] = new Dictionary<string, string>
        {
            ["ports"] = "5672,15672",
            ["entryPoint"] = "eRents.RabbitMQMicroservice.dll", 
            ["projectPath"] = "eRents.RabbitMQMicroservice/eRents.RabbitMQMicroservice.csproj",
            ["copyPath"] = "eRents.RabbitMQMicroservice"
        }
    };
    
    var config = projectConfigs.ContainsKey(projectType) ? projectConfigs[projectType] : projectConfigs["WebApi"];
#>
# <#= projectName #> Dockerfile - Generated by eRents CodeGen
# Project Type: <#= projectType #>
# Generated on: <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>

# ===============================================
# STAGE 1: Base Runtime Image
# ===============================================
FROM <#= baseImage #> AS base
LABEL maintainer="eRents Development Team"
LABEL project="<#= projectName #>"
LABEL version="1.0.0"

WORKDIR <#= workDir #>

# Expose ports for <#= projectType #>
<# 
    string[] ports = config["ports"].Split(',');
    foreach (string port in ports) 
    { 
#>
EXPOSE <#= port.Trim() #>
<# } #>

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser

# Install system dependencies if needed
<# if (projectType == "RabbitMQMicroservice") { #>
# Install additional dependencies for RabbitMQ
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*
<# } #>

# ===============================================
# STAGE 2: Build Environment
# ===============================================
FROM <#= sdkImage #> AS build
WORKDIR <#= srcDir #>

# Copy solution file and project files for dependency restoration
COPY ["*.sln", "./"]
COPY ["eRents.Domain/eRents.Domain.csproj", "eRents.Domain/"]
COPY ["eRents.Features/eRents.Features.csproj", "eRents.Features/"]
COPY ["eRents.Shared/eRents.Shared.csproj", "eRents.Shared/"]
COPY ["<#= config["projectPath"] #>", "<#= config["copyPath"] #>/"]

# Restore dependencies
RUN dotnet restore "<#= config["projectPath"] #>"

# Copy all source code
COPY . .

# Build the application
WORKDIR "<#= srcDir #>/<#= config["copyPath"] #>"
RUN dotnet build "<#= projectName #>.csproj" -c Release -o <#= workDir #>/build --no-restore

# ===============================================
# STAGE 3: Publish Application
# ===============================================
FROM build AS publish
RUN dotnet publish "<#= projectName #>.csproj" -c Release -o <#= workDir #>/publish /p:UseAppHost=false --no-restore

# ===============================================
# STAGE 4: Final Runtime Image
# ===============================================
FROM base AS final
WORKDIR <#= workDir #>

# Copy published application
COPY --from=publish <#= workDir #>/publish .

# Set ownership and permissions
RUN chown -R appuser:appuser <#= workDir #>
USER appuser

# Health check configuration
<# if (projectType == "WebApi") { #>
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1
<# } else if (projectType == "RabbitMQMicroservice") { #>
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:15672/api/overview || exit 1
<# } #>

# Environment variables
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:80
<# if (projectType == "WebApi") { #>
ENV ASPNETCORE_HTTPS_PORT=443
<# } #>

# Application entry point
ENTRYPOINT ["dotnet", "<#= config["entryPoint"] #>"]

# ===============================================
# BUILD INSTRUCTIONS
# ===============================================
# To build this image:
# docker build -t <#= projectName.ToLower() #> -f <#= projectName #>.dockerfile .
#
# To run with docker-compose:
# docker-compose up -d
#
# To run standalone:
# docker run -d -p <#= ports[0] #>:<#= ports[0] #> <#= projectName.ToLower() #>
# ===============================================
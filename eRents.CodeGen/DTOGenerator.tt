<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Input parameter 'entityName' is now passed by the T4 host (Program.cs)
    
    // Define properties for this entity - CUSTOMIZE THESE FOR EACH ENTITY
    var properties = new List<(string Type, string Name)>
    {
        ("int", "Id"),
        ("string", "Name"),
        ("string?", "Description"),
        ("DateTime", "CreatedAt"),
        ("DateTime", "UpdatedAt")
        // TODO: Customize properties for your specific entity
    };
    
    // NEW FEATURE-BASED NAMESPACES
    string featureNamespace = $"eRents.Features.{entityName}Management.DTOs";
    string sharedDtoNamespace = "eRents.Features.Shared.DTOs";

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using <#= sharedDtoNamespace #>;

namespace <#= featureNamespace #>;

/// <summary>
/// Response DTO for <#= entityName.ToLower() #> data
/// Clean DTO - no cross-entity data, just foreign key IDs
/// </summary>
public class <#= entityName #>Response
{
<#
    foreach(var prop in properties)
    {
#>
    public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
    }
#>
    
    // TODO: Add foreign key IDs only - no embedded objects
    // Examples:
    // public int? CategoryId { get; set; }
    // public int? CreatedById { get; set; }
    // public List<int> RelatedEntityIds { get; set; } = new();
}

/// <summary>
/// Request DTO for creating a new <#= entityName.ToLower() #>
/// </summary>
public class <#= entityName #>Request
{
<#
    // Filter out Id, CreatedAt, UpdatedAt for Request - these are set by the system
    foreach(var prop in properties.Where(p => p.Name != "Id" && p.Name != "CreatedAt" && p.Name != "UpdatedAt"))
    {
#>
    public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
    }
#>
    
    // TODO: Add entity-specific fields
    // Examples:
    // public int? CategoryId { get; set; }
    // public List<int> RelatedEntityIds { get; set; } = new();
}

/// <summary>
/// Search object for filtering <#= entityName.ToLower() #> queries
/// Inherits pagination from PagedRequest
/// </summary>
public class <#= entityName #>SearchObject
{
    public int Page { get; set; } = 1;
    public int PageSize { get; set; } = 10;
    
    public int? <#= entityName #>Id { get; set; }
    public string? NameFTS { get; set; }
    
    // TODO: Add entity-specific search fields
    // Examples:
    // public DateTime? CreatedAfter { get; set; }
    // public DateTime? CreatedBefore { get; set; }
    // public bool? IsActive { get; set; }
    // public int? CategoryId { get; set; }
} 
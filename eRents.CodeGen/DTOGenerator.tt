<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Input parameter 'entityName' is now passed by the T4 host (Program.cs)
    
    // Define properties for this entity - THIS LIST STILL NEEDS TO BE MANUALLY EDITED IN THIS TEMPLATE PER ENTITY
    // TODO: Consider moving this to an external config file (e.g., JSON) per entity if more flexibility is needed.
    var properties = new List<(string Type, string Name)>
    {
        ("int", "Id"),
        ("string", "Name"), // Example: typical name property
        ("string", "Description"), // Example: typical description
        ("DateTime", "DateAdded") // Example: typical audit field
        // Add more default/common properties if desired, or keep minimal
    };
    
    string requestNamespace = "eRents.Shared.DTO.Requests";
    string responseNamespace = "eRents.Shared.DTO.Response";
    string searchObjectModelNamespace = "eRents.Shared.SearchObjects"; // Assuming BaseSearchObject is here

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using <#= searchObjectModelNamespace #>; // For BaseSearchObject

// Request DTOs
namespace <#= requestNamespace #>
{
    public class <#= entityName #>InsertRequest
    {
<#
    // Filter out Id and DateAdded for InsertRequest, common practice
    foreach(var prop in properties.Where(p => p.Name != "Id" && p.Name != "DateAdded"))
    {
#>
        public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
    }
#>
    }

    public class <#= entityName #>UpdateRequest
    {
<#
    // Filter out Id and DateAdded for UpdateRequest, common practice
    // Often, all fields are updatable, but this can be customized.
    foreach(var prop in properties.Where(p => p.Name != "Id" && p.Name != "DateAdded"))
    {
#>
        public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
    }
#>
    }

    // Search Object DTO
    // The DTOGenerator.tt was already updated to make this inherit from BaseSearchObject
    // and include Id and NameFTS. Ensure that change is present.
    public class <#= entityName #>SearchObject : BaseSearchObject
    {
        public int? Id { get; set; } 
        public string? NameFTS { get; set; } 
        // Add any other GENERIC search fields here if needed.
        // For entity-specific search fields, they should be manually added to the generated file
        // or by creating a derived SearchObject.
    }
}

// Response DTO
namespace <#= responseNamespace #>
{
    public class <#= entityName #>Response
    {
<#
    foreach(var prop in properties)
    {
#>
        public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
    }
#>
        // Example of adding a related object, if common
        // public OtherEntityResponse RelatedEntity { get; set; }
    }
} 
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="projectName" type="System.String" #>
<#@ parameter name="includeDatabase" type="System.Boolean" #>
<#@ parameter name="includeRabbitMQ" type="System.Boolean" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".yml" #>
<#
    // Docker Compose Generation Template for eRents Project
    // Generates complete docker-compose.yml with all required services
    string projectLower = projectName.ToLower();
    string networkName = $"{projectLower}_network";
#>
# docker-compose.yml for <#= projectName #>
# Generated by eRents CodeGen on <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>
# 
# SCHOOL REQUIREMENT COMPLIANCE:
# ✅ Microservice Architecture: Main API + Helper Service
# ✅ RabbitMQ Integration: Async message processing
# ✅ Database Integration: SQL Server with persistence
# ✅ Docker Containerization: All services containerized
# ✅ Network Configuration: Internal service communication

version: '3.8'

# ===============================================
# NETWORKS CONFIGURATION
# ===============================================
networks:
  <#= networkName #>:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ===============================================
# VOLUMES CONFIGURATION
# ===============================================
volumes:
<# if (includeDatabase) { #>
  <#= projectLower #>_db_data:
    driver: local
<# } #>
<# if (includeRabbitMQ) { #>
  <#= projectLower #>_rabbitmq_data:
    driver: local
  <#= projectLower #>_rabbitmq_logs:
    driver: local
<# } #>

# ===============================================
# SERVICES CONFIGURATION
# ===============================================
services:

  # ===============================================
  # MAIN API SERVICE (Primary Microservice)
  # ===============================================
  <#= projectLower #>-api:
    build:
      context: .
      dockerfile: eRents.WebApi.dockerfile
    container_name: <#= projectLower #>-api
    restart: unless-stopped
    ports:
      - "5000:80"
      - "5001:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - ASPNETCORE_HTTPS_PORT=443
<# if (includeDatabase) { #>
      - ConnectionStrings__DefaultConnection=Server=<#= projectLower #>-db;Database=<#= projectName #>DB;User Id=sa;Password=YourStrongPassword123!;TrustServerCertificate=true;
<# } #>
<# if (includeRabbitMQ) { #>
      - RabbitMQ__HostName=<#= projectLower #>-rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
<# } #>
    depends_on:
<# if (includeDatabase) { #>
      - <#= projectLower #>-db
<# } #>
<# if (includeRabbitMQ) { #>
      - <#= projectLower #>-rabbitmq
<# } #>
    networks:
      - <#= networkName #>
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.<#= projectLower #>-api.rule=Host(`api.<#= projectLower #>.local`)"

  # ===============================================
  # RABBITMQ MICROSERVICE (Helper Service)
  # ===============================================
<# if (includeRabbitMQ) { #>
  <#= projectLower #>-microservice:
    build:
      context: .
      dockerfile: eRents.RabbitMQMicroservice.dockerfile
    container_name: <#= projectLower #>-microservice
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
<# if (includeDatabase) { #>
      - ConnectionStrings__DefaultConnection=Server=<#= projectLower #>-db;Database=<#= projectName #>DB;User Id=sa;Password=YourStrongPassword123!;TrustServerCertificate=true;
<# } #>
      - RabbitMQ__HostName=<#= projectLower #>-rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
    depends_on:
<# if (includeDatabase) { #>
      - <#= projectLower #>-db
<# } #>
      - <#= projectLower #>-rabbitmq
    networks:
      - <#= networkName #>
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[d]otnet' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===============================================
  # RABBITMQ MESSAGE BROKER
  # ===============================================
  <#= projectLower #>-rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: <#= projectLower #>-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - <#= projectLower #>_rabbitmq_data:/var/lib/rabbitmq
      - <#= projectLower #>_rabbitmq_logs:/var/log/rabbitmq
    networks:
      - <#= networkName #>
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.<#= projectLower #>-rabbitmq.rule=Host(`rabbitmq.<#= projectLower #>.local`)"
      - "traefik.http.services.<#= projectLower #>-rabbitmq.loadbalancer.server.port=15672"
<# } #>

  # ===============================================
  # SQL SERVER DATABASE
  # ===============================================
<# if (includeDatabase) { #>
  <#= projectLower #>-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: <#= projectLower #>-db
    restart: unless-stopped
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrongPassword123!
      - MSSQL_PID=Express
    volumes:
      - <#= projectLower #>_db_data:/var/opt/mssql
    networks:
      - <#= networkName #>
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrongPassword123!' -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
<# } #>

  # ===============================================
  # REDIS CACHE (Optional)
  # ===============================================
  <#= projectLower #>-redis:
    image: redis:7-alpine
    container_name: <#= projectLower #>-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass "redispassword123"
    volumes:
      - <#= projectLower #>_redis_data:/data
    networks:
      - <#= networkName #>
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 30s

volumes:
  <#= projectLower #>_redis_data:
    driver: local

# ===============================================
# USAGE INSTRUCTIONS
# ===============================================
# 
# 1. BUILD AND START ALL SERVICES:
#    docker-compose up -d --build
# 
# 2. VIEW LOGS:
#    docker-compose logs -f
# 
# 3. STOP ALL SERVICES:
#    docker-compose down
# 
# 4. STOP AND REMOVE VOLUMES:
#    docker-compose down -v
# 
# 5. SCALE MICROSERVICE:
#    docker-compose up -d --scale <#= projectLower #>-microservice=3
# 
# 6. ACCESS SERVICES:
#    - Main API: http://localhost:5000
#    - RabbitMQ Management: http://localhost:15672 (guest/guest)
<# if (includeDatabase) { #>
#    - SQL Server: localhost,1433 (sa/YourStrongPassword123!)
<# } #>
#    - Redis: localhost:6379
# 
# SCHOOL REQUIREMENTS FULFILLED:
# ✅ Microservice Architecture: API + RabbitMQ Microservice
# ✅ Message Queue Integration: RabbitMQ with management UI
# ✅ Database Integration: SQL Server with persistent storage
# ✅ Docker Containerization: All services containerized
# ✅ Service Discovery: Internal network communication
# ✅ Health Checks: All services have health monitoring
# ✅ Volume Persistence: Data survives container restarts
# ===============================================
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // NEW FEATURE-BASED ARCHITECTURE
    string pluralizedEntityName = entityName + "s"; // Simple pluralization for controller name
    
    string controllerNamespace = $"eRents.Features.{entityName}Management.Controllers";
    string serviceNamespace = $"eRents.Features.{entityName}Management.Services";
    string dtoNamespace = $"eRents.Features.{entityName}Management.DTOs";
    string sharedDtoNamespace = "eRents.Features.Shared.DTOs";
    string servicesNamespace = "eRents.Shared.Services";

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using <#= serviceNamespace #>;
using <#= dtoNamespace #>;
using <#= sharedDtoNamespace #>;
using <#= servicesNamespace #>;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace <#= controllerNamespace #>;

/// <summary>
/// <#= entityName #> management controller following new feature architecture
/// Uses service directly - no repository layer or base controller inheritance
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class <#= pluralizedEntityName #>Controller : ControllerBase
{
    private readonly <#= entityName #>Service _<#= entityName.ToLower() #>Service;
    private readonly ILogger<<#= pluralizedEntityName #>Controller> _logger;

    public <#= pluralizedEntityName #>Controller(
        <#= entityName #>Service service,
        ILogger<<#= pluralizedEntityName #>Controller> logger)
    {
        _<#= entityName.ToLower() #>Service = service;
        _logger = logger;
    }

    /// <summary>
    /// Get paginated list of <#= pluralizedEntityName.ToLower() #>
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<PagedResponse<<#= entityName #>Response>>> GetPaged([FromQuery] <#= entityName #>SearchObject search)
    {
        try
        {
            var result = await _<#= entityName.ToLower() #>Service.GetPagedAsync(search);
            
            _logger.LogInformation("Retrieved {Count} <#= pluralizedEntityName.ToLower() #> with pagination", 
                result.Items.Count);
                
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> retrieval failed");
            return StatusCode(500, "An error occurred while retrieving <#= pluralizedEntityName.ToLower() #>");
        }
    }

    /// <summary>
    /// Get <#= entityName.ToLower() #> by ID
    /// </summary>
    [HttpGet("{id}")]
    public async Task<ActionResult<<#= entityName #>Response>> GetById(int id)
    {
        try
        {
            var result = await _<#= entityName.ToLower() #>Service.GetByIdAsync(id);
            
            if (result == null)
            {
                _logger.LogWarning("<#= entityName #> not found: {Id}", id);
                return NotFound($"<#= entityName #> with ID {id} not found");
            }
            
            _logger.LogInformation("Retrieved <#= entityName.ToLower() #> {Id}", id);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> retrieval failed for ID {Id}", id);
            return StatusCode(500, "An error occurred while retrieving the <#= entityName.ToLower() #>");
        }
    }

    /// <summary>
    /// Create a new <#= entityName.ToLower() #>
    /// </summary>
    [HttpPost]
    [Authorize(Roles = "Admin,Landlord")] // TODO: Adjust roles as needed
    public async Task<ActionResult<<#= entityName #>Response>> Create([FromBody] <#= entityName #>Request request)
    {
        try
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = await _<#= entityName.ToLower() #>Service.CreateAsync(request);

            _logger.LogInformation("<#= entityName #> created successfully: {Id}", result.Id);

            return CreatedAtAction(nameof(GetById), new { id = result.Id }, result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> creation failed");
            return StatusCode(500, "An error occurred while creating the <#= entityName.ToLower() #>");
        }
    }

    /// <summary>
    /// Update an existing <#= entityName.ToLower() #>
    /// </summary>
    [HttpPut("{id}")]
    [Authorize(Roles = "Admin,Landlord")] // TODO: Adjust roles as needed
    public async Task<ActionResult<<#= entityName #>Response>> Update(int id, [FromBody] <#= entityName #>Request request)
    {
        try
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = await _<#= entityName.ToLower() #>Service.UpdateAsync(id, request);

            if (result == null)
            {
                _logger.LogWarning("<#= entityName #> not found for update: {Id}", id);
                return NotFound($"<#= entityName #> with ID {id} not found");
            }

            _logger.LogInformation("<#= entityName #> updated successfully: {Id}", id);
            return Ok(result);
        }
        catch (UnauthorizedAccessException)
        {
            _logger.LogWarning("Unauthorized attempt to update <#= entityName.ToLower() #> {Id}", id);
            return Forbid();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> update failed for ID {Id}", id);
            return StatusCode(500, "An error occurred while updating the <#= entityName.ToLower() #>");
        }
    }

    /// <summary>
    /// Delete a <#= entityName.ToLower() #>
    /// </summary>
    [HttpDelete("{id}")]
    [Authorize(Roles = "Admin,Landlord")] // TODO: Adjust roles as needed
    public async Task<IActionResult> Delete(int id)
    {
        try
        {
            var result = await _<#= entityName.ToLower() #>Service.DeleteAsync(id);
            
            if (!result)
            {
                _logger.LogWarning("<#= entityName #> not found for deletion: {Id}", id);
                return NotFound($"<#= entityName #> with ID {id} not found");
            }
            
            _logger.LogInformation("<#= entityName #> deleted successfully: {Id}", id);
            return NoContent();
        }
        catch (UnauthorizedAccessException)
        {
            _logger.LogWarning("Unauthorized attempt to delete <#= entityName.ToLower() #> {Id}", id);
            return Forbid();
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Cannot delete <#= entityName.ToLower() #> {Id} due to dependencies", id);
            return Conflict("Cannot delete entity with related records");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> deletion failed for ID {Id}", id);
            return StatusCode(500, "An error occurred while deleting the <#= entityName.ToLower() #>");
        }
    }

    // TODO: Add entity-specific endpoints here
    // Example:
    /*
    [HttpGet("{id}/details")]
    public async Task<ActionResult<<#= entityName #>Response>> GetWithDetails(int id)
    {
        try
        {
            // Add your custom logic here
            var result = await _<#= entityName.ToLower() #>Service.GetByIdAsync(id);
            
            if (result == null)
                return NotFound();
            
            _logger.LogInformation("Retrieved detailed <#= entityName.ToLower() #> {Id}", id);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> details retrieval failed for ID {Id}", id);
            return StatusCode(500, "An error occurred");
        }
    }
    */
} 
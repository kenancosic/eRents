<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Input parameter 'entityName' is now passed by the T4 host (Program.cs)
    string pluralizedEntityName = entityName + "s"; // Simple pluralization for controller name

    string controllerNamespace = "eRents.WebApi.Controllers";
    string serviceFullInterfaceName = $"eRents.Application.Service.{entityName}Service.I{entityName}Service";
    string applicationSharedNamespace = "eRents.Application.Shared";
    string dtoRequestsNamespace = "eRents.Shared.DTO.Requests";
    string dtoResponseNamespace = "eRents.Shared.DTO.Response";

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using <#= applicationSharedNamespace #>;
using <#= dtoRequestsNamespace #>;
using <#= dtoResponseNamespace #>;
using <#= serviceFullInterfaceName.Substring(0, serviceFullInterfaceName.LastIndexOf('.')) #>; // Using directive for the service interface's namespace
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks; // For Task<ActionResult<T>>
using System.Collections.Generic; // For IEnumerable<T>


namespace <#= controllerNamespace #>
{
    [ApiController]
    [Route("[controller]")] // Standard API route:/Entitys
    // [Authorize] // Uncomment if authorization is typically required
    public class <#= pluralizedEntityName #>Controller : BaseCRUDController<<#= entityName #>Response, <#= entityName #>SearchObject, <#= entityName #>InsertRequest, <#= entityName #>UpdateRequest>
    {
        // The specific service interface, already used by BaseCRUDController constructor
        // private readonly I<#= entityName #>Service _<#= entityName.ToLower() #>Service;

        public <#= pluralizedEntityName #>Controller(I<#= entityName #>Service service)
            : base(service) 
        {
            // _<#= entityName.ToLower() #>Service = service; // If you need to store it for specific methods
        }

        // Example of an entity-specific action (uncomment and modify as needed):
        /*
        [HttpGet("{id}/details")]
        public async Task<ActionResult<<#= entityName #>Response>> Get<#= entityName #>WithDetails(int id)
        {
            // Assuming your I<#= entityName #>Service might have a method like GetByIdWithDetailsAsync
            // var result = await (_service as I<#= entityName #>Service).GetByIdWithDetailsAsync(id);
            // if (result == null) return NotFound();
            // return Ok(result);
            return Ok(); // Placeholder
        }
        */
    }
} 
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Input parameter 'entityName' is now passed by the T4 host (Program.cs)
    string pluralizedEntityName = entityName + "s"; // Simple pluralization for controller name

    string controllerNamespace = "eRents.WebApi.Controllers";
    string serviceFullInterfaceName = $"eRents.Application.Service.{entityName}Service.I{entityName}Service";
    string applicationSharedNamespace = "eRents.Application.Shared";
    string dtoRequestsNamespace = "eRents.Shared.DTO.Requests";
    string dtoResponseNamespace = "eRents.Shared.DTO.Response";
    string searchObjectsNamespace = "eRents.Shared.SearchObjects";
    string servicesNamespace = "eRents.Shared.Services";
    string enhancedBaseNamespace = "eRents.WebApi.Controllers.Base";

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using <#= serviceFullInterfaceName.Substring(0, serviceFullInterfaceName.LastIndexOf('.')) #>;
using <#= dtoRequestsNamespace #>;
using <#= dtoResponseNamespace #>;
using <#= searchObjectsNamespace #>;
using <#= enhancedBaseNamespace #>;
using <#= servicesNamespace #>;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace <#= controllerNamespace #>
{
    /// <summary>
    /// <#= entityName #> management controller with enhanced error handling and logging
    /// </summary>
    [ApiController]
    [Route("[controller]")]
    [Authorize] // All endpoints require authentication
    public class <#= pluralizedEntityName #>Controller : EnhancedBaseCRUDController<<#= entityName #>Response, <#= entityName #>SearchObject, <#= entityName #>InsertRequest, <#= entityName #>UpdateRequest>
    {
        private readonly I<#= entityName #>Service _<#= entityName.ToLower() #>Service;

        public <#= pluralizedEntityName #>Controller(
            I<#= entityName #>Service service,
            ILogger<<#= pluralizedEntityName #>Controller> logger,
            ICurrentUserService currentUserService) : base(service, logger, currentUserService)
        {
            _<#= entityName.ToLower() #>Service = service;
        }

        /// <summary>
        /// Get all <#= pluralizedEntityName.ToLower() #> with filtering and pagination
        /// </summary>
        [HttpGet]
        public override async Task<IEnumerable<<#= entityName #>Response>> Get([FromQuery] <#= entityName #>SearchObject search)
        {
            try
            {
                var result = await _<#= entityName.ToLower() #>Service.GetAsync(search);
                
                _logger.LogInformation("User {UserId} retrieved {ItemCount} <#= pluralizedEntityName.ToLower() #> with search filters", 
                    _currentUserService.UserId ?? "unknown", result.Count());
                    
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "<#= entityName #> retrieval failed for user {UserId}", 
                    _currentUserService.UserId ?? "unknown");
                throw;
            }
        }

        /// <summary>
        /// Get <#= entityName.ToLower() #> by ID
        /// </summary>
        [HttpGet("{id}")]
        public override async Task<<#= entityName #>Response> GetById(int id)
        {
            try
            {
                var result = await _<#= entityName.ToLower() #>Service.GetByIdAsync(id);
                
                _logger.LogInformation("User {UserId} retrieved <#= entityName.ToLower() #> {ItemId}", 
                    _currentUserService.UserId ?? "unknown", id);
                    
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "<#= entityName #> retrieval failed for user {UserId} and ID {ItemId}", 
                    _currentUserService.UserId ?? "unknown", id);
                throw;
            }
        }

        /// <summary>
        /// Create a new <#= entityName.ToLower() #>
        /// </summary>
        [HttpPost]
        [Authorize(Roles = "Admin,Landlord")] // Adjust roles as needed
        public override async Task<<#= entityName #>Response> Insert([FromBody] <#= entityName #>InsertRequest insert)
        {
            try
            {
                var result = await base.Insert(insert);

                _logger.LogInformation("<#= entityName #> created successfully by user {UserId}", 
                    _currentUserService.UserId ?? "unknown");

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "<#= entityName #> creation failed for user {UserId}", 
                    _currentUserService.UserId ?? "unknown");
                throw;
            }
        }

        /// <summary>
        /// Update an existing <#= entityName.ToLower() #>
        /// </summary>
        [HttpPut("{id}")]
        [Authorize(Roles = "Admin,Landlord")] // Adjust roles as needed
        public override async Task<<#= entityName #>Response> Update(int id, [FromBody] <#= entityName #>UpdateRequest update)
        {
            try
            {
                var result = await base.Update(id, update);

                _logger.LogInformation("<#= entityName #> updated successfully: {ItemId} by user {UserId}", 
                    id, _currentUserService.UserId ?? "unknown");

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "<#= entityName #> update failed for user {UserId} and ID {ItemId}", 
                    _currentUserService.UserId ?? "unknown", id);
                throw;
            }
        }

        /// <summary>
        /// Delete a <#= entityName.ToLower() #>
        /// </summary>
        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin,Landlord")] // Adjust roles as needed
        public override async Task<IActionResult> Delete(int id)
        {
            try
            {
                var result = await base.Delete(id);
                
                _logger.LogInformation("<#= entityName #> deleted successfully: {ItemId} by user {UserId}", 
                    id, _currentUserService.UserId ?? "unknown");
                    
                return result;
            }
            catch (Exception ex)
            {
                return HandleStandardError(ex, $"<#= entityName #> deletion (ID: {id})");
            }
        }

        // TODO: Add entity-specific endpoints here
        // Example:
        /*
        [HttpGet("{id}/details")]
        public async Task<IActionResult> Get<#= entityName #>WithDetails(int id)
        {
            try
            {
                // Add your custom logic here
                var result = await _<#= entityName.ToLower() #>Service.GetByIdAsync(id);
                
                _logger.LogInformation("User {UserId} retrieved detailed <#= entityName.ToLower() #> {ItemId}", 
                    _currentUserService.UserId ?? "unknown", id);
                    
                return Ok(result);
            }
            catch (Exception ex)
            {
                return HandleStandardError(ex, $"<#= entityName #> details retrieval (ID: {id})");
            }
        }
        */
    }
} 
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="entityName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // NEW FEATURE-BASED ARCHITECTURE
    string dbSetName = entityName + "s"; // Simple pluralization for DbSet
    string pluralizedEntityName = entityName + "s"; // For readable text
    string serviceNamespace = $"eRents.Features.{entityName}Management.Services";
    string dtoNamespace = $"eRents.Features.{entityName}Management.DTOs";
    string mapperNamespace = $"eRents.Features.{entityName}Management.Mappers";
    string sharedDtoNamespace = "eRents.Features.Shared.DTOs";
    string domainModelsNamespace = "eRents.Domain.Models";
    string efCoreNamespace = "Microsoft.EntityFrameworkCore";
    string servicesNamespace = "eRents.Shared.Services";

#>
// <auto-generated>
// This code was generated by a T4 template.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using <#= domainModelsNamespace #>;
using <#= dtoNamespace #>;
using <#= mapperNamespace #>;
using <#= sharedDtoNamespace #>;
using <#= servicesNamespace #>;
using <#= efCoreNamespace #>;
using eRents.Domain.Shared;
using Microsoft.Extensions.Logging;

namespace <#= serviceNamespace #>;

/// <summary>
/// Service for <#= entityName #> entity operations using ERentsContext directly
/// Follows new clean architecture - no repository layer
/// </summary>
public class <#= entityName #>Service
{
    private readonly ERentsContext _context;
    private readonly IUnitOfWork _unitOfWork;
    private readonly ICurrentUserService _currentUserService;
    private readonly ILogger<<#= entityName #>Service> _logger;

    public <#= entityName #>Service(
        ERentsContext context,
        IUnitOfWork unitOfWork,
        ICurrentUserService currentUserService,
        ILogger<<#= entityName #>Service> logger)
    {
        _context = context;
        _unitOfWork = unitOfWork;
        _currentUserService = currentUserService;
        _logger = logger;
    }

    /// <summary>
    /// Get paginated list of <#= pluralizedEntityName.ToLower() #>
    /// </summary>
    public async Task<PagedResponse<<#= entityName #>Response>> GetPagedAsync(<#= entityName #>SearchObject search)
    {
        try
        {
            var query = _context.<#= dbSetName #>.AsQueryable();
            
            // Apply filters
            query = ApplyFilters(query, search);
            
            // TODO: Add includes for related entities
            // query = query.Include(x => x.Category);
            
            var totalCount = await query.CountAsync();
            
            var items = await query
                .Skip((search.Page - 1) * search.PageSize)
                .Take(search.PageSize)
                .ToListAsync();
            
            _logger.LogInformation("Retrieved {Count} <#= pluralizedEntityName.ToLower() #> for user {UserId}", 
                items.Count, _currentUserService.UserId ?? "unknown");
            
            return new PagedResponse<<#= entityName #>Response>
            {
                Items = items.Select(x => x.To<#= entityName #>Response()).ToList(),
                TotalCount = totalCount,
                Page = search.Page,
                PageSize = search.PageSize
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> retrieval failed for user {UserId}", 
                _currentUserService.UserId ?? "unknown");
            throw;
        }
    }

    /// <summary>
    /// Get <#= entityName.ToLower() #> by ID
    /// </summary>
    public async Task<<#= entityName #>Response?> GetByIdAsync(int id)
    {
        try
        {
            var entity = await _context.<#= dbSetName #>
                // TODO: Add includes for related entities
                // .Include(x => x.Category)
                .FirstOrDefaultAsync(x => x.Id == id);
            
            if (entity == null)
            {
                _logger.LogWarning("<#= entityName #> not found: {Id}", id);
                return null;
            }
            
            _logger.LogInformation("Retrieved <#= entityName.ToLower() #> {Id} for user {UserId}", 
                id, _currentUserService.UserId ?? "unknown");
            
            return entity.To<#= entityName #>Response();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "<#= entityName #> retrieval failed for ID {Id}", id);
            throw;
        }
    }

    /// <summary>
    /// Create a new <#= entityName.ToLower() #>
    /// </summary>
    public async Task<<#= entityName #>Response> CreateAsync(<#= entityName #>Request request)
    {
        return await _unitOfWork.ExecuteInTransactionAsync(async () =>
        {
            var entity = request.ToEntity();
            
            // Set audit fields
            entity.CreatedAt = DateTime.UtcNow;
            entity.UpdatedAt = DateTime.UtcNow;
            entity.CreatedBy = _currentUserService.UserId;
            entity.ModifiedBy = _currentUserService.UserId;
            
            // TODO: Add business logic validation
            // ValidateEntity(entity);
            
            _context.<#= dbSetName #>.Add(entity);
            await _context.SaveChangesAsync();
            
            _logger.LogInformation("Created <#= entityName.ToLower() #> {Id} by user {UserId}", 
                entity.Id, _currentUserService.UserId ?? "unknown");
            
            return entity.To<#= entityName #>Response();
        });
    }

    /// <summary>
    /// Update an existing <#= entityName.ToLower() #>
    /// </summary>
    public async Task<<#= entityName #>Response?> UpdateAsync(int id, <#= entityName #>Request request)
    {
        return await _unitOfWork.ExecuteInTransactionAsync(async () =>
        {
            var entity = await _context.<#= dbSetName #>
                .FirstOrDefaultAsync(x => x.Id == id);
            
            if (entity == null)
            {
                _logger.LogWarning("<#= entityName #> not found for update: {Id}", id);
                return null;
            }
            
            // TODO: Add authorization check
            // if (!CanUserModifyEntity(entity))
            //     throw new UnauthorizedAccessException();
            
            request.UpdateEntity(entity);
            
            // Update audit fields
            entity.UpdatedAt = DateTime.UtcNow;
            entity.ModifiedBy = _currentUserService.UserId;
            
            await _context.SaveChangesAsync();
            
            _logger.LogInformation("Updated <#= entityName.ToLower() #> {Id} by user {UserId}", 
                id, _currentUserService.UserId ?? "unknown");
            
            return entity.To<#= entityName #>Response();
        });
    }

    /// <summary>
    /// Delete a <#= entityName.ToLower() #>
    /// </summary>
    public async Task<bool> DeleteAsync(int id)
    {
        return await _unitOfWork.ExecuteInTransactionAsync(async () =>
        {
            var entity = await _context.<#= dbSetName #>
                .FirstOrDefaultAsync(x => x.Id == id);
            
            if (entity == null)
            {
                _logger.LogWarning("<#= entityName #> not found for deletion: {Id}", id);
                return false;
            }
            
            // TODO: Add authorization check
            // if (!CanUserModifyEntity(entity))
            //     throw new UnauthorizedAccessException();
            
            // TODO: Check for dependencies
            // var hasRelatedRecords = await _context.RelatedEntities
            //     .AnyAsync(x => x.<#= entityName #>Id == id);
            // if (hasRelatedRecords)
            //     throw new InvalidOperationException("Cannot delete entity with related records");
            
            _context.<#= dbSetName #>.Remove(entity);
            await _context.SaveChangesAsync();
            
            _logger.LogInformation("Deleted <#= entityName.ToLower() #> {Id} by user {UserId}", 
                id, _currentUserService.UserId ?? "unknown");
            
            return true;
        });
    }

    /// <summary>
    /// Apply search filters to the query
    /// </summary>
    private IQueryable<<#= entityName #>> ApplyFilters(IQueryable<<#= entityName #>> query, <#= entityName #>SearchObject search)
    {
        if (search.<#= entityName #>Id.HasValue)
        {
            query = query.Where(x => x.Id == search.<#= entityName #>Id.Value);
        }

        if (!string.IsNullOrEmpty(search.NameFTS))
        {
            // TODO: Adjust based on your entity's searchable fields
            // query = query.Where(x => x.Name.Contains(search.NameFTS));
        }

        // TODO: Add entity-specific filters
        // if (search.CreatedAfter.HasValue)
        //     query = query.Where(x => x.CreatedAt >= search.CreatedAfter.Value);
        
        return query;
    }
} 